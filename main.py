
import argparse
import pickle
import sys
from typing import Union
from pathlib import Path
from unittest import result

import numpy as np
from malgan import MalGAN, MalwareDataset, BlackBoxDetector, setup_logger

import torch
from torch import nn


z = 10
batch_size = 32
num_epochs = 100
hidden_size_gen = [256, 256]
hidden_size_dis = [256, 256]
pretrained_model_path = None


def load_dataset(file_path: Union[str, Path], y: int) -> MalwareDataset:
    file_ext = Path(file_path).suffix
    if file_ext in {".npy", ".npz"}:
        data = np.load(file_path)
    elif file_ext in {".pt", ".pth"}:
        data = torch.load(str(file_path))
    elif file_ext == ".pk":
        with open(str(file_path), "rb") as f_in:
            data = pickle.load(f_in)
    else:
        raise ValueError("Unknown file extension.  Cannot determine how to import")
    return MalwareDataset(x=data, y=y)


def main(z, batch_size, num_epochs, hidden_size_gen, hidden_size_dis, list_of_apis_to_use=None):
    if list_of_apis_to_use is None:
        list_of_apis_to_use = []


    setup_logger(False)

    here = Path(__file__).absolute().parent
    # mal_file = here / "data/benign.csv"
    # ben_file = here / "data/malware.csv"

    mal_file = here / "data/trial_mal.npy"
    ben_file = here / "data/trial_ben.npy"

    
    detector = BlackBoxDetector.Type.get_from_name(BlackBoxDetector.Type.RandomForest.name)
    
    for (name, path) in (("malware", mal_file), ("benign", ben_file)):
        if path.exists():
            continue
        print(f"Unknown %s file \"%s\"" % (name, str(path)))
        sys.exit(1)

    MalGAN.MALWARE_BATCH_SIZE = batch_size

    malgan = MalGAN(
                    load_dataset(mal_file, MalGAN.Label.Malware.value),
                    load_dataset(ben_file, MalGAN.Label.Benign.value),
                    Z=z,
                    h_gen=hidden_size_gen,
                    h_discrim=hidden_size_dis,
                    g_hidden=nn.LeakyReLU,
                    detector_type=detector)
                    

    malgan.fit(num_epochs, False)
    result = malgan.measure_and_export_results()
    print(result)

    malgan = malgan.cpu()

    binary_array, _ = malgan(next(iter(malgan._mal_data.test))[0][:1])
    array = binary_array.flatten().cpu().numpy()

    for func in list_of_apis_to_use:
        index = api_map_to_index[func]

        if index < 128:
            array[index] = 1

    genscript.generate(array)



if __name__ == "__main__":
    main(z, batch_size, num_epochs, hidden_size_gen, hidden_size_dis, None)
